mean(xdata[:,3])
xdata
mean(xdata,"Solar.R")
mean(xdata,Solar.R)
View(`o31andt90.data`)
solar<-xdata(,3)
solar<-xdata[,3]
solar<-xdata[,2]
mean(solar)
foo<-xdata[,"Solar.R"]
mean(foo)
y.df <- subset(complete.data, Month == 6)
View(y.df)
View(complete.data)
y <- data.matrix(y.df) #convert to matrix
temp <-y[,"Temp"]
mean_temp <- mean(temp)
mean_temp
y.df <- subset(data, Month == 6)
View(y.df)
y <- data.matrix(y.df) #convert to matrix
temp <-y[,"Temp"]
mean(temp)
View(data)
View(complete.data)
z.df <- subset(complete.data, Month ==5)
z <- data.matrix(z.df) #convert to matrix
ozone <-z[,"Ozone"]
max(ozone)
View(z.df)
View(z.df)
z2.df <- subset(data, Month ==5)
z2 <- data.matrix(z2.df) #convert to matrix
ozone2 <-z2[,"Ozone"]
max(ozone2)
# R Programming - April 2014
# Week 1 Quiz
# Question 18:  Extract the subset of rows of the data frame
# where Ozone values are above 31 and Temp values are above 90.
# What is the mean of Solar.R in this subset?
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
getwd()
data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
temp.above90.data <- subset(ozone.above31.data, Temp > 90)  #subset of data
o31andt90.data <- subset(complete.data, Ozone > 31 & Temp > 90) #test both conditions at once
xdata <- data.matrix(o31andt90.data)  # convert to matrix?  need to do this to find mean?
solar<-xdata[,"Solar.R"]
mean(solar)
# Question 19:  Mean Temp when Month = 6
y.df <- subset(data, Month == 6)  #use all the data not the cleaned set
y <- data.matrix(y.df) #convert to matrix
temp <-y[,"Temp"]
mean(temp)
# Question 20: What was the maximum ozone value in the month of May (i.e. Month = 5)?
z.df <- subset(complete.data, Month ==5) #must used "cleaned" data otherwise max() returns NA
z <- data.matrix(z.df) #convert to matrix
ozone <-z[,"Ozone"]
max(ozone)
# R Programming - April 2014
# Week 1 Quiz
# Question 18:  Extract the subset of rows of the data frame
# where Ozone values are above 31 and Temp values are above 90.
# What is the mean of Solar.R in this subset?
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
getwd()
data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
temp.above90.data <- subset(ozone.above31.data, Temp > 90)  #subset of data
o31andt90.data <- subset(complete.data, Ozone > 31 & Temp > 90) #test both conditions at once
xdata <- data.matrix(o31andt90.data)  # convert to matrix?  need to do this to find mean?
solar<- xdata[,"Solar.R"]
mean(solar)
# Question 19:  Mean Temp when Month = 6
y.df <- subset(data, Month == 6)  #use all the data not the cleaned set
y <- data.matrix(y.df) #convert to matrix
temp <- y[,"Temp"]
mean(temp)
# Question 20: What was the maximum ozone value in the month of May (i.e. Month = 5)?
z.df <- subset(complete.data, Month ==5) #must used "cleaned" data otherwise max() returns NA
z <- data.matrix(z.df) #convert to matrix
ozone <- z[,"Ozone"]
max(ozone)
t.df <- subset(data, Month == 6)
t1 <- t.df[,"Temp"]
mean(t1)
mean(t.df)
mean(t.df[,"Temp"])
mean(subset(data, Month == 6))
mean(subset(data, Month == 6)[,"Temp"])
mean(subset(data, Ozone > 31 & Temp > 90)[,"Solar.R"])
max(subset(data, Month == 5)[,"Ozone"])
max(subset(complete.data, Month == 5)[,"Ozone"])
# R Programming - April 2014
# Week 1 Quiz
# Question 18:  Extract the subset of rows of the data frame
# where Ozone values are above 31 and Temp values are above 90.
# What is the mean of Solar.R in this subset?
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
getwd()
data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
temp.above90.data <- subset(ozone.above31.data, Temp > 90)  #subset of data
o31andt90.data <- subset(complete.data, Ozone > 31 & Temp > 90) #test both conditions at once
xdata <- data.matrix(o31andt90.data)  # convert to matrix?  need to do this to find mean?
solar<- xdata[,"Solar.R"]
mean(solar)
# Question 19:  Mean Temp when Month = 6
y.df <- subset(data, Month == 6)  #use all the data not the cleaned set
y <- data.matrix(y.df) #convert to matrix
temp <- y[,"Temp"]
mean(temp)
# Question 20: What was the maximum ozone value in the month of May (i.e. Month = 5)?
z.df <- subset(complete.data, Month ==5) #must used "cleaned" data otherwise max() returns NA
z <- data.matrix(z.df) #convert to matrix
ozone <- z[,"Ozone"]
max(ozone)
# Compressed code for Questions 18-20
mean(subset(data, Month == 6)[,"Temp"])
mean(subset(data, Ozone > 31 & Temp > 90)[,"Solar.R"])
max(subset(complete.data, Month == 5)[,"Ozone"])  # need NA removed dataset for max()
# R Programming - April 2014
# Week 1 Quiz
# Question 18:  Extract the subset of rows of the data frame
# where Ozone values are above 31 and Temp values are above 90.
# What is the mean of Solar.R in this subset?
hw1_data <- read.csv("~/Downloads/hw1_data.csv")
getwd()
data<-hw1_data
dim(data)  #dimensions of input data
good <- complete.cases(data) #logical vector to weed out NAs
complete.data<-data[good,][,]  #complete data only
names(complete.data) #check names in data frame
ozone.above31.data <- subset(complete.data, Ozone > 31) #subset of data
temp.above90.data <- subset(ozone.above31.data, Temp > 90)  #subset of data
o31andt90.data <- subset(complete.data, Ozone > 31 & Temp > 90) #test both conditions at once
xdata <- data.matrix(o31andt90.data)  # convert to matrix?  need to do this to find mean?
solar<- xdata[,"Solar.R"]
mean(solar)
# Question 19:  Mean Temp when Month = 6
y.df <- subset(data, Month == 6)  #use all the data not the cleaned set
y <- data.matrix(y.df) #convert to matrix
temp <- y[,"Temp"]
mean(temp)
# Question 20: What was the maximum ozone value in the month of May (i.e. Month = 5)?
z.df <- subset(complete.data, Month ==5) #must used "cleaned" data otherwise max() returns NA
z <- data.matrix(z.df) #convert to matrix
ozone <- z[,"Ozone"]
max(ozone)
# Compressed code for Questions 18-20
# (matches previous results)
mean(subset(data, Month == 6)[,"Temp"])
mean(subset(data, Ozone > 31 & Temp > 90)[,"Solar.R"])
max(subset(complete.data, Month == 5)[,"Ozone"])  # need NA removed dataset for max()
install.packages("swirl")  # Installs swirl
library(swirl)  # Loads swirl
swirl()  # Runs swirl
install.packages("swirl")  # Installs swirl
library(swirl)  # Loads swirl
swirl()  # Runs swirl
library(datasets)
data(iris)
?iris
myi <- iris
View(iris)
MPG <- read.csv("~/Downloads/MPG.csv")
View(MPG)
ColMean?
?ColMean
?ColMeans
ColMeans?
ColSums(MPG,Cost)
mean(MPG,"MPG")
x <-MPG
ColSums(X)
ColSums(x)
colMeans(x)
colMeans(x,7)
tail(x)
nrow(x)
mean(x,[,"MPG"])
mean(x[,"MPG"])
mileage <- MPG[,"MPG"]
mean(mileage)
View(x)
?ColMeans
colMeans(x,na.rm = TRUE)
mean?
?mean
mean(mileage, na.rm=TRUE)
cost<-x[,"Cost"]
sum(cost)
PriusMPG <- read.csv("~/Downloads/PriusMPG.csv")
View(PriusMPG)
priusMileage<-PriusMPG[,"MPG"]
mean(priusMileage, na.rm=TRUE)
?split
pCost <- PriusMPG[,"Cost"]
sum(pCost)
sum(pCost, na.rm=TRUE)
?days
92464/6
(92464/6)/12
View(x)
?dates
?date
5757/6
mean(x[,7])
mean(x[,7],na.rm=TRUE)
sum(x[,4])
class(x[,1])
y<-strptime(x[1,1])
y<-as.date(x[1,1])
y<-as.Date(x[1,1])
?strp
?str
summary(x)
str(x)
x[,1]>="12/31/2013"
as.Date(x[,1])>="12/31/2013"
x[1,1]
str(date)
str(as.Date)
summary(PriusMPG)
summary(x)
factor
?factor
colMeans(x[,7])
str(colMeans)
?colMeans
class(x[,7])
x[,7]
colMeans(x[,7],na.rm=TRUE)
x
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
install.packages("~/Downloads/xlsx_0.5.5.tgz", repos = NULL)
library(xlsx)
R.Version()
R.Version()
install.packages("xlsx")
library(xlsx)
rowIndex <- 18:23
colIndex <- 7:15
dat <- read.xlsx("./data/NGAP.xlsx,sheetIndex=1,colIndex=colIndex,rowIndex=rowIndex")
install.packages("devtools")
?by
source('~/.active-rstudio-document', echo=TRUE)
data <- fixed
data$date <- as.Date(data$date)
weekorend <- factor(nrow(data))
weekorend <- factor(1:nrow(data))
wday_wend <- factor(rep(NA, nrow(data)))
str(wday_wend)
summary(wday_wend)
fweek <- factor(rep(NA, nrow(data)))
fweek <- factor(rep(NA, nrow(data)))
for (i in 1:nrow(data)) {
if (weekdays(data[i,"date"]) == "Saturday") {
fweek[i] <- "weekend"
}
else if (weekdays(data[i,"date"]) == "Sunday") {
fweek[i] <- "weekend"
}
else {
fweek[i] <- "weekday"
}
}
summary(fweek)
str(fweek)
fweek <- vector(rep(NA, nrow(data)))
fweek <- character(rep(NA, nrow(data)))
a <- rep(NA, 10)
fweek <- rep(NA, nrow(data))
for (i in 1:nrow(data)) {
if (weekdays(data[i,"date"]) == "Saturday") {
fweek[i] <- "weekend"
}
else if (weekdays(data[i,"date"]) == "Sunday") {
fweek[i] <- "weekend"
}
else {
fweek[i] <- "weekday"
}
}
str(fweek)
summary(fweek)
fweek <- as.factor(fweek)
summary(fweek)
fwday <- rep(NA, nrow(data))
for (i in 1:nrow(data)) {
if (weekdays(data[i,"date"]) == "Saturday") {
fwday[i] <- "weekend"
}
else if (weekdays(data[i,"date"]) == "Sunday") {
fwday[i] <- "weekend"
}
else {
fwday[i] <- "weekday"
}
}
fwday <- as.factor(fwday)
by(data, fwday, nrow)
by(data, fwday, mean)
factorw <- rep(NA, nrow(data))
for (i in 1:nrow(data)) {
if (weekdays(data[i,"date"]) == "Saturday") {
factorw[i] <- "weekend"
}
else if (weekdays(data[i,"date"]) == "Sunday") {
factorw[i] <- "weekend"
}
else {
factorw[i] <- "weekday"
}
}
factorw <- as.factor(factorw)
by(data, factorw, tapply(steps, interval, mean))
View(data)
by(data, factorw, with(data, tapply(steps, interval, mean))
by(data, factorw, with(data, tapply(steps, interval, mean)))
by(data, factorw, function(x) {tapply(steps, interval, mean)})
by(data, factorw, function(x) {with(data, tapply(steps, interval, mean)})
by(data, factorw, function(x) {
with(data, tapply(steps, interval, mean))
})
foo<- by(data, factorw, function(x) {
with(data, tapply(steps, interval, mean))
})
as.data.frame(foo)
foo
str(foo)
View(avgdaily)
summary(foo)
str(foo)
foo["weekday"]
str(foo["weekday"])
temp <- as.data.frame(str(foo["weekday"]))
View(temp)
plot(foo["weekday"])
intsteps<- by(data, factorw, function(x) {
with(data, tapply(steps, interval, mean))
})
str(intsteps)
plot(intsteps["weekday"], times, type="l")
plot(times, intsteps["weekday"], type="l")
length(times)
length(intsteps["weekday"])
length(intsteps[["weekday"]])
plot(times, intsteps[["weekday"]], type="l")
plot(times, intsteps[["weekday"]], type="l")
plot(times, intsteps[["weekend"]], type="l")
plot(times, intsteps[["weekend"]], type="l")
plot(times, intsteps[["weekday"]], type="l")
plot(times, intsteps[["weekend"]], type="l")
c <- as.data.frame(intsteps[["weekday"]])
View(c)
d <- cbind(c, intsteps[["weekend"]])
View(d)
identical(c,d)
identical(intsteps[["weekend"]],intsteps[["weekday"]])
data <- fixed
data$date <- as.Date(data$date)
factorw <- rep(NA, nrow(data))
for (i in 1:nrow(data)) {
if (weekdays(data[i,"date"]) == "Saturday") {
factorw[i] <- "weekend"
}
else if (weekdays(data[i,"date"]) == "Sunday") {
factorw[i] <- "weekend"
}
else {
factorw[i] <- "weekday"
}
}
factorw <- as.factor(factorw)
intsteps<- by(data, factorw, function(x) {
with(data, tapply(steps, interval, mean))
})
plot(times, intsteps[["weekday"]], type="l")
plot(times, intsteps[["weekend"]], type="l")
identical(intsteps[["weekend"]],intsteps[["weekday"]])
by(data, factorw, nrow)
steps <- by(data, factorw,
function(x) {
tapply(data$steps, data$interval, mean))
}
)
steps <- by(data, factorw,
function(x) {
tapply(data$steps, data$interval, mean)
}
)
e <- as.data.frame(steps[["weekday"]])
View(e)
f <- cbind(e,steps[["weekend"]])
View(f)
steps <- by(data, factorw,
function(x) {
tapply(x$steps, x$interval, mean)
}
)
e <- as.data.frame(steps[["weekday"]])
View(e)
f <- cbind(e,steps[["weekend"]])
View(f)
plot(times, steps[["weekday"]], type="l")
plot(times, steps[["weekend"]], type="l")
plot(times, steps[["weekday"]], type="l"
xlab='Time interval', ylab='Number of Steps',
main='Average Number of Steps')
lines(times, steps[["weekend"]], type="l")
legend("topright","",c("Weekday","Weekend"),
col=c("black","red"),
lwd=c(1,1,1))
if (!file.exists("data")) {
dir.create("data")
}
filePath <- "./data/"
fileZipName <- "repdata-data-activity.zip"
fileName <- "activity.csv"
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
ZipFile <- paste0(filePath, fileZipName)        # path to zipped data file
if (!file.exists(ZipFile)) {
download.file(fileUrl, destfile = ZipFile, method ="curl")
unzip(ZipFile, exdir=filePath)
dateDownloaded <- date()
}
raw <- read.csv(paste0(filePath, fileName),colClasses = c("integer", "character", "integer"))
clean <- na.omit(raw)
clean$date <- as.factor(clean$date)
clean$interval <- as.factor(clean$interval)
dailysteps <- with(clean, tapply(steps, date, sum))
myhist <- hist(dailysteps, xlab='steps', main='Histogram of Daily Steps')
echo = TRUE
cat("Mean Number of Daily Steps = ", mean(dailysteps))
cat("Median Number of Daily Step =", median(dailysteps))
intervalsteps <- with(clean, tapply(steps, interval, mean))
times <- as.integer(rownames(intervalsteps))
avgdaily <- cbind(times,intervalsteps)
myplot <- plot(avgdaily, type="l",
xlab='Time interval', ylab='Number of Steps',
main='Average Number of Steps')
echo = TRUE
row <- which(avgdaily[,"intervalsteps"]==max(avgdaily[,"intervalsteps"]))
cat("The 5-minute Interval with the Maximum Steps is: ", avgdaily[row,"times"])
cat("The Maximum number of steps in this interval =", max(avgdaily[,"intervalsteps"]))
echo = TRUE
cat("Total number of rows with NAs =", (nrow(raw) - nrow(na.omit(raw))))
echo = TRUE
cat("My strategy is to replace all missing values with the mean value for the corresponding 5-minute interval")
fixed <- raw
for (i in 1:nrow(raw)) {
if (is.na(raw[i,"steps"])) {
x <- raw[i,"interval"]
filler <- avgdaily[which(avgdaily[,"times"] == x), "intervalsteps"]
fixed[i, "steps"] <- filler
}
}
fdailysteps <- with(fixed, tapply(steps, date, sum))
myhist2 <- hist(fdailysteps, xlab='steps', main='Histogram of Daily Steps with Missing Values Estimated')
cat("Mean Number of Daily Steps (with missing values estimated) = ", mean(fdailysteps))
cat("Median Number of Daily Step (with missing values estimated) =", median(fdailysteps))
data <- fixed
data$date <- as.Date(data$date)                         # convert to date object
factorw <- rep(NA, nrow(data))                          # allocate for factor
for (i in 1:nrow(data)) {                               # walk through data, weekday or weekend?
if (weekdays(data[i,"date"]) == "Saturday") {
factorw[i] <- "weekend"
}
else if (weekdays(data[i,"date"]) == "Sunday") {
factorw[i] <- "weekend"
}
else {
factorw[i] <- "weekday"
}
}
factorw <- as.factor(factorw)
steps <- by(data, factorw,                              # per factor, calc mean steps per interval
function(x) {
tapply(x$steps, x$interval, mean)
}
)
plot(times, steps[["weekday"]], type="l"
xlab='Time interval', ylab='Number of Steps',
main='Average Number of Steps')
lines(times, steps[["weekend"]], type="l")
legend("topright","",c("Weekday","Weekend"),
col=c("black","red"),
lwd=c(1,1,1))
plot(times, steps[["weekday"]], type="l"
xlab='Time interval', ylab='Number of Steps',
main='Average Number of Steps')
plot(times, steps[["weekday"]], type="l"
xlab='Time interval', ylab='Number of Steps',
main='Average Number of Steps')
